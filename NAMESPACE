useDynLib('rmstbart', .registration=TRUE)
##exportPattern("^[[:alpha:]]+")
export(RMST_BART)
#export(wbart, mc.wbart, pwbart, mc.wbart.gse, mc.pwbart)
#export(pbart, mc.pbart)
#export(gbart, mc.gbart)
##export(gbmm, mc.gbmm)
export(abart, mc.abart)
##export(spbart, mc.spbart)
#export(stratrs, rs.pbart)
#export(mbart, mc.mbart)
#export(mbart2, mc.mbart2)
#export(surv.bart, surv.pwbart, mc.surv.bart, mc.surv.pwbart)
#export(recur.pre.bart, recur.bart, recur.pwbart, mc.recur.bart, mc.recur.pwbart)
export(mc.cores.openmp)
export(rtnorm, draw_lambda_i, rtgamma)
export(spectrum0ar)
##export(bartModelMatrix, class.ind)
export(bartModelMatrix)
#export(srstepwise)
##export(dpgbart)
importFrom(nnet, class.ind)
importFrom(Rcpp, evalCpp)
importFrom(parallel, detectCores)
importFrom(stats, ar, cor, dbinom, dnorm, lm, predict, pnorm, qnorm, qchisq, plogis, qlogis, quantile, residuals, runif, sd, coef, vcov)
importFrom(survival, survfit, Surv, survreg)
importFrom(tools, psnice)
importFrom(nlme, lme)
S3method(predict, wbart)
S3method(predict, mbart)
S3method(predict, mbart2)
## export(predict.mbart2)
## export(predict.wbart, predict.pbart, predict.lbart, predict.mbart)
## export(predict.survbart, predict.recurbart)
## export(predict.criskbart, predict.crisk2bart)
##S3method(predict, gbart)
##export(predict.gbart)
